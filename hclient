#!/usr/bin/env python3

from __future__ import print_function

import argparse
import logging
from distutils.util import strtobool
from sys import stderr, stdout, version_info
from getpass import getuser

import re

from hive_metastore.ttypes import AlreadyExistsException, NoSuchObjectException
from hmsclient import HMSClient

_default_host = 'localhost'
_default_port = 9083
_LIST_COMMAND = 'list'


def main():
    parser = argparse.ArgumentParser(description='Hive Metastore client')
    parser.add_argument('-H', '--host', dest='host', default=_default_host,
                        help='HMS server address')
    parser.add_argument('-d', '--db', help='database name')
    parser.add_argument('-t', '--table', help='table name')
    parser.add_argument('-C', '--column', action='append', help='column name:type')
    parser.add_argument('-P', '--partition', dest='partitions', action='append', help='partition name:type')
    parser.add_argument('-u', '--user', help='user name', default=getuser())
    parser.add_argument('-c', '--comment', help='comment')
    parser.add_argument('-L', '--loglevel', help='Log level', default='error',
                        choices=['info', 'debug', 'warning', 'error'])
    parser.add_argument('--force', action='store_true', help='force destructive operation')
    parser.add_argument('-v', '--verbose', action='count', help='show more information')
    parser.add_argument('--show-partitions', dest='showpartitions',
                        action='store_true', help='show partitions information')
    parser.add_argument('command',
                        choices=['add', 'listdb', 'currnotification', 'list', 'create', 'drop', 'rm'],
                        help='HMS action')
    # Remaining params
    # parser.add_argument('params', nargs=argparse.REMAINDER)

    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args.loglevel)
    logging.basicConfig(level=numeric_level)

    with HMSClient(args.host) as client:
        if args.command == 'listdb':
            return cmd_listdb(client, args)
        if args.command == 'list':
            return cmd_list(client, args)
        if args.command == 'create':
            return cmd_create(client, args)
        if args.command in ['drop', 'rm']:
            return cmd_drop(client, args)
        if args.command == 'add':
            return cmd_add_partition(client, args)
        if args.command == 'currnotification':
            return cmd_get_current_notification(client, args)

    return 0


def cmd_list(client, args):
    for db in client.get_all_databases():
        if not args.db or re.search(args.db, db):
            for t in client.get_all_tables(db):
                if not args.table or re.search(args.table, t):
                    print('{}.{}'.format(db, t))
                    if not args.verbose and args.showpartitions:
                        print('\tparts:\t', '\n\t\t'.join(client.get_partition_names(db, t)))
                    elif args.verbose:
                        tbl = client.get_table(db, t)
                        print('\towner: {}, location: {}'.format(tbl.owner, tbl.sd.location))
                        print('\t    ', '\n\t    '.join(client.parse_schema(tbl.sd.cols)))
                        if args.verbose and args.verbose > 1:
                            print('\t\t\t', '\n\t\t\t'.join(client.get_partition_names(db, t)))
    return 0


def cmd_listdb(client, args):
    for d in client.get_all_databases():
        if not args.db or re.search(args.db, d):
            print(d)
    return 0


def cmd_create(client, args):
    logger = logging.getLogger(__name__)
    try:
        if args.table:
            logger.debug('creating table %s.%s as user %s', args.table, args.db, args.user)
            client.create_table(client.make_table(args.db,
                                                  args.table,
                                                  owner=args.user,
                                                  columns=client.make_schema(args.column),
                                                  partition_keys=client.make_schema(args.partitions)))
        else:
            logger.debug('creating database %s', args.db)
            client.create_database(args.db, comment=args.comment, owner=args.user)
    except AlreadyExistsException:
        logger.error("Object %s.%s already exists", args.db, args.table)
        stderr.write("Object {}.{} already exists\n".format(args.db, args.table))
        return 1

    return 0


def cmd_drop(client, args):
    logger = logging.getLogger(__name__)
    if args.partitions:
        logger.debug('drop partition %s.%s %s', args.db, args.table, args.partitions)
        try:
            client.drop_partitions(args.db, args.table, args.partitions)
        except NoSuchObjectException:
            stderr.write("No such partition\n")
            return 1
        return 0
    for db in client.get_all_databases():
        if not args.db or re.search(args.db, db):
            for t in client.get_all_tables(db):
                if not args.table or re.search(args.table, t):
                    if args.force or query_yes_no('drop table {}.{}'.format(db, t)):
                        logger.info('dropping table %s.%s', db, t)
                        client.drop_table(db, t)
                    else:
                        logger.info('skipping table %s.%s', db, t)
    return 0


def cmd_add_partition(client, args):
    """

    :param client:
    :type client: HMSClient
    :param args:
    :return:
    """
    try:
        client.add_partition(client.get_table(args.db, args.table), args.partitions)
    except AlreadyExistsException:
        stderr.write("Such partition already exists\n")
        return 1

    return 0


def cmd_get_current_notification(client, args):
    print(client.get_current_notification_id())
    return 0


def query_yes_no(question):
    """
    Ask for yes/no answer
    :param question: Question to ask
    :type question: str
    :return: user responce
    """
    def my_input():
        """
        Python2 uses raw_input, Python3 uses input()

        :return: raw input value
        """
        if version_info[0] > 2:
            return input()
        else:
            return raw_input()

    while True:
        stdout.write(question + " [y/n]? ")
        answer = my_input()
        if not answer:
            return False
        return bool(strtobool(answer))


if __name__ == "__main__":
    exit(main())
